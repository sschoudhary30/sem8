%%bash
# Install compiler (on Colab)

cat > parallel.cpp << 'EOF'
#include <vector>
#include <iostream>
#include <omp.h>
#include <chrono>
using namespace std;
using namespace std::chrono;

void bubble(vector<int> &arr) {
    int n = arr.size();
    for (int i = 0; i < n - 1; i++)
        for (int j = 0; j < n - i - 1; j++)
            if (arr[j] > arr[j + 1])
                swap(arr[j], arr[j + 1]);
}

void pbubble(vector<int> &arr) {
    int n = arr.size();
    #pragma omp parallel for
    for (int i = 0; i < n - 1; i++)
        for (int j = 0; j < n - i - 1; j++)
            if (arr[j] > arr[j + 1])
                swap(arr[j], arr[j + 1]);
}

void merge(vector<int> &arr, int left, int right, int mid) {
    int n1 = mid - left + 1, n2 = right - mid;
    vector<int> L(n1), R(n2);
    for (int i = 0; i < n1; i++) L[i] = arr[left + i];
    for (int i = 0; i < n2; i++) R[i] = arr[mid + 1 + i];
    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        if (L[i] < R[j]) arr[k++] = L[i++];
        else              arr[k++] = R[j++];
    }
    while (i < n1) arr[k++] = L[i++];
    while (j < n2) arr[k++] = R[j++];
}

void merge_sort(vector<int> &arr, int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        merge_sort(arr, left, mid);
        merge_sort(arr, mid + 1, right);
        merge(arr, left, right, mid);
    }
}

void merge_sort_p(vector<int> &arr, int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        #pragma omp parallel sections
        {
            #pragma omp section
            merge_sort(arr, left, mid);
            #pragma omp section
            merge_sort(arr, mid + 1, right);
        }
        merge(arr, left, right, mid);
    }
}

int main() {
    const int n = 10000;
    vector<int> arr; arr.reserve(n);
    omp_set_num_threads(4);

    // generate data
    for (int i = 0; i < n; i++)
        arr.push_back(rand() % n);

    // Sequential bubble
    auto start = high_resolution_clock::now();
    bubble(arr);
    auto end = high_resolution_clock::now();
    double overall_seq = duration<double, nano>(end - start).count();
    cout << "Sequential one b " << overall_seq << "\n";

    // Parallel bubble
    vector<int> arr2 = arr;
    start = high_resolution_clock::now();
    pbubble(arr2);
    end = high_resolution_clock::now();
    double overall_parr = duration<double, nano>(end - start).count();
    cout << "Parallel one b  " << overall_parr << "\n";
    cout << "Speed up Factor: " << overall_seq / overall_parr << "\n";

    // Sequential merge
    vector<int> arr3 = arr;
    start = high_resolution_clock::now();
    merge_sort(arr3, 0, n - 1);
    end = high_resolution_clock::now();
    double overall_seq_m = duration<double, nano>(end - start).count();
    cout << "Sequential one m " << overall_seq_m << "\n";

    // Parallel merge
    vector<int> arr4 = arr;
    start = high_resolution_clock::now();
    merge_sort_p(arr4, 0, n - 1);
    end = high_resolution_clock::now();
    double overall_parr_m = duration<double, nano>(end - start).count();
    cout << "Parallel one m  " << overall_parr_m << "\n";
    cout << "Speed up Factor: " << overall_seq_m / overall_parr_m << "\n";

    return 0;
}
EOF

!g++ parallel.cpp -std=c++11 -fopenmp -O2 -o parallel
!./parallel

// 1) classic index‑based
for (size_t i = 0; i < arr4.size(); ++i) {
    std::cout << arr4[i] << ' ';
}
std::cout << '\n';

// 2) range‑based for
for (int x : arr4) {
    std::cout << x << ' ';
}
std::cout << '\n';