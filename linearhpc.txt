%%bash
cat > linear_regression.cpp << 'EOF'
// linear_regression.cpp
#include <iostream>
#include <vector>
#include <random>
#include <omp.h>
using namespace std;

void sequentail_lr(const vector<double> &x, const vector<double> &y,
                   double &beta0, double &beta1, double &time)
{
    int n = x.size();
    double sum_x = 0.0, sum_y = 0.0, sum_xy = 0.0, sum_x2 = 0.0;

    double start = omp_get_wtime();
    for (int i = 0; i < n; ++i) {
        sum_x  += x[i];
        sum_y  += y[i];
        sum_xy += x[i] * y[i];
        sum_x2 += x[i] * x[i];
    }
    beta1 = (n * sum_xy - sum_x * sum_y)
          / (n * sum_x2 - sum_x * sum_x);
    beta0 = (sum_y - beta1 * sum_x) / n;
    double end = omp_get_wtime();

    time = end - start;
}

void parallel_lr(const vector<double> &x, const vector<double> &y,
                 double &beta0, double &beta1, double &time)
{
    int n = x.size();
    double sum_x = 0.0, sum_y = 0.0, sum_xy = 0.0, sum_x2 = 0.0;

    double start = omp_get_wtime();
    #pragma omp parallel for reduction(+:sum_x,sum_y,sum_xy,sum_x2)
    for (int i = 0; i < n; ++i) {
        sum_x  += x[i];
        sum_y  += y[i];
        sum_xy += x[i] * y[i];
        sum_x2 += x[i] * x[i];
    }
    beta1 = (n * sum_xy - sum_x * sum_y)
          / (n * sum_x2 - sum_x * sum_x);
    beta0 = (sum_y - beta1 * sum_x) / n;
    double end = omp_get_wtime();

    time = end - start;
}

int main()
{
    // 1) Build a big synthetic dataset
    int n = 100'000'000;
    vector<double> x(n), y(n);
    std::mt19937_64 rng(42);
    std::normal_distribution<double> noise(0, 0.5);

    for (int i = 0; i < n; ++i) {
        x[i] = i * 0.001;                   // e.g. [0, 0.001, 0.002, ...]
        y[i] = 3.0 * x[i] + 5.0 + noise(rng);
    }

    omp_set_num_threads(omp_get_max_threads());

    double beta0_seq, beta1_seq, time_seq;
    double beta0_par, beta1_par, time_par;

    // 2) Run sequential
    sequentail_lr(x, y, beta0_seq, beta1_seq, time_seq);

    // 3) Run parallel
    parallel_lr(x, y, beta0_par, beta1_par, time_par);

    // 4) Report
    cout << "\nSequential Execution:\n"
         << "  beta0 = " << beta0_seq
         << ", beta1 = " << beta1_seq
         << ", time = " << time_seq << " s\n"
         << "  y = " << beta1_seq << "·x + " << beta0_seq << "\n";

    cout << "\nParallel Execution:\n"
         << "  beta0 = " << beta0_par
         << ", beta1 = " << beta1_par
         << ", time = " << time_par << " s\n"
         << "  y = " << beta1_par << "·x + " << beta0_par << "\n";

    double speedup = time_seq / time_par;
    cout << "\nSpeedup: " << speedup << "×\n";

    return 0;
}

EOF

!g++ -std=c++17 -O2 -fopenmp linear_regression.cpp -o linear_regression

!./linear_regression